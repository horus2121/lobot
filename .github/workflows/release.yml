name: 'Release'
on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: get changelog
        run: npx auto-changelog -p --stdout --ignore-commit-pattern '^(update|doc|chore|(?!.*:)).*' --hide-credit > changelog.txt
      - name: upload Changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.txt
      - name: get artifact id
        id: get-artifact-id
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })
            console.log(data)
            return data.artifacts[0].id
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const changelog = await github.rest.actions.getArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: ${{ steps.get-artifact-id.outputs.result }}
            })
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `pana-v${process.env.PACKAGE_VERSION}`,
              name: `pana-v${process.env.PACKAGE_VERSION}`,
              body: `Take a look at the assets to download the installer/bundle for your operating system.\n{changelog}`,
              draft: true,
              prerelease: false
            })
            return data.id
      - name: delete artifact
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: ${{ steps.get-artifact-id.outputs.result }}
            })

  build-tauri:
    needs: [create-release]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: install frontend dependencies
        run: npm ci
      - name: run build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
